name: Build PYZ distribution

on:
  workflow_call:
    inputs:
      app-main:
        required: true
        type: string
        description: |
          Main/default entrypoint also used as name of zipapp distributable

      app-alts:
        default: ""
        required: false
        type: string
        description: |
          Alternate entrypoints into app to be distributed along with zipapp:
          space-delimited names and/or regular expressions

      app-solo:
        default: true
        required: false
        type: boolean
        description: |
          Whether to distribute the standalone zipapp on its own (in addition to
          archives bundling zipapp along with alternate entrypoints)

jobs:
  dist-setup:
    runs-on: ubuntu-latest

    outputs:
      alts: ${{steps.pyproject.outputs.alts}}
      app-version: ${{steps.pyproject.outputs.app-version}}
      build-id: ${{steps.conf.outputs.build-id}}
      py-versions: ${{steps.conf.outputs.py-versions}}
      platforms: ${{steps.conf.outputs.platforms}}
      platforms-native: ${{steps.conf.outputs.platforms-native}}
      platforms-emulation: ${{steps.conf.outputs.platforms-emulation}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Determine app version & alternate entrypoints
        id: pyproject
        shell: python
        run: |
          import json
          import os
          import re
          import tomllib

          main = '${{ inputs.app-main }}'

          alt_patterns = '${{ inputs.app-alts }}'.split()

          with open('pyproject.toml', 'rb') as fd:
              conf = tomllib.load(fd)

          app_version = conf['tool']['poetry']['version']

          if alt_patterns:
              entrypoints = conf['tool']['poetry']['scripts'].keys()
              alternates = [
                  name for name in (entrypoints - {main})
                  if any(re.fullmatch(alt_pattern, name)
                         for alt_pattern in alt_patterns)
              ]
          else:
              alternates = []

          print('app version:', app_version)
          print('alternates:', alternates)

          with open(os.getenv('GITHUB_OUTPUT'), 'a') as fd:
              print('app-version', app_version, sep='=', file=fd)
              print('alts', ' '.join(alternates), sep='=', file=fd)

          # fail workflow if neither alternates to bundle nor stand-alone
          if not alternates and not json.loads('${{ inputs.app-solo }}'):
              print('workflow has nothing to do!')
              raise SystemExit(1)

      - name: Set up matrices, etc.
        id: conf
        run: |
          PY_VERSIONS=$(<<<'[
            {
              "number": "3.8",
              "label": "38"
            },
            {
              "number": "3.9",
              "label": "39"
            },
            {
              "number": "3.10",
              "label": "310"
            },
            {
              "number": "3.11",
              "label": "311"
            }
          ]' jq -c .)

          echo "py-versions=$PY_VERSIONS" >> $GITHUB_OUTPUT

          EMULATION=$(<<<'[
            {
              "arch": "aarch64",
              "platform": "arm64",
              "repo": "arm64v8"
            }
          ]' jq -c .)

          echo "platforms-emulation=$EMULATION" >> $GITHUB_OUTPUT

          NATIVE=$(<<<'[
            {
              "arch": "x86_64"
            }
          ]' jq -c .)

          echo "platforms-native=$NATIVE" >> $GITHUB_OUTPUT

          PLATFORMS="$(jq -cs add <<<"$EMULATION $NATIVE")"

          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT

          RELEASE_NAME="${{ github.event.release.tag_name }}"

          BUILD_ID="${RELEASE_NAME:-${{ github.sha }}}"

          echo "build-id=$BUILD_ID" >> $GITHUB_OUTPUT

  build-native:
    needs:
      - dist-setup

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest

        python-version: ${{ fromJson(needs.dist-setup.outputs.py-versions) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version.number }}

      - name: Set up build dependencies
        run: |
          python -m pip install shiv

      - name: Set up build directories
        run: |
          mkdir build

      - name: Build zipapp
        run: |
          SHEBANG="/usr/bin/env python${{ matrix.python-version.number }}"

          BUILD_ID="${{ needs.dist-setup.outputs.build-id }}"

          shiv -c "${{ inputs.app-main }}" -o ./build/"${{ inputs.app-main }}" -p "$SHEBANG" --build-id "$BUILD_ID" .

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.app-main }}-pyz-py${{ matrix.python-version.label }}-x86_64
          path: build/*

  build-emulator:
    needs:
      - dist-setup

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        emulation: ${{ fromJson(needs.dist-setup.outputs.platforms-emulation) }}

        python-version: ${{ fromJson(needs.dist-setup.outputs.py-versions) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.emulation.platform }}

      - name: Set up build directories
        run: |
          mkdir build

      - name: Build zipapp
        run: |
          IMAGE="${{ matrix.emulation.repo }}/python:${{ matrix.python-version.number }}-bullseye"

          SHEBANG="/usr/bin/env python${{ matrix.python-version.number }}"

          BUILD_ID="${{ needs.dist-setup.outputs.build-id }}"

          cat <<EOF | docker run -v ${PWD}:/app/ -w /app/ --rm -i "$IMAGE" sh
            python -m pip install shiv
            shiv -c "${{ inputs.app-main }}" -o ./build/"${{ inputs.app-main }}" -p "$SHEBANG" --build-id "$BUILD_ID" .
          EOF

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.app-main }}-pyz-py${{ matrix.python-version.label }}-${{ matrix.emulation.arch }}
          path: build/*

  package-dist:
    needs:
      - dist-setup
      - build-native
      - build-emulator

    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: ${{ fromJson(needs.dist-setup.outputs.platforms).*.arch }}

        python-label: ${{ fromJson(needs.dist-setup.outputs.py-versions).*.label }}

    env:
      LABEL: ${{ needs.dist-setup.outputs.app-version }}-py${{ matrix.python-label }}-${{ matrix.arch }}

    steps:
      - name: Set up work directories
        run: |
          mkdir build dist

      - name: Retrieve build artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.app-main }}-pyz-py${{ matrix.python-label }}-${{ matrix.arch }}
          path: build

      - name: Fix build artifact permissions
        run: |
          chmod +x ./build/"${{ inputs.app-main }}"

      - name: Checkout fate-pyz repository
        uses: actions/checkout@v3
        with:
          # ensure we don't grab the *calling* repository
          repository: internet-equity/fate-pyz
          path: ./fate-pyz

      - name: Patch main entrypoint
        run: |
          zip -Aj ./build/"${{ inputs.app-main }}" ./fate-pyz/src/__main__.py

      - name: Generate alternate entrypoints
        if: needs.dist-setup.outputs.alts
        run: |
          echo -n ${{ needs.dist-setup.outputs.alts }} |
            xargs -d " " -I {} \
            cp --preserve=mode ./fate-pyz/src/entrypoint.sh ./build/{}

      - name: Copy main distribution
        if: inputs.app-solo
        run: |
          cp --preserve=mode ./build/"${{ inputs.app-main }}" ./dist/"${{ inputs.app-main }}"-"$LABEL"

      - name: Bundle full distributions
        if: needs.dist-setup.outputs.alts
        shell: bash
        run: |
          ALTS=(${{ needs.dist-setup.outputs.alts }})

          zip -j -Z store ./dist/"${{ inputs.app-main }}"-all-"$LABEL".zip ./build/"${{ inputs.app-main }}" "${ALTS[@]/#/./build/}"

          tar -cf ./dist/"${{ inputs.app-main }}"-all-"$LABEL".tar -C ./build/ "${{ inputs.app-main }}" ${ALTS[@]}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.app-main }}-dist-${{ env.LABEL }}
          path: dist

  package-release:
    if: github.event.release.tag_name

    needs:
      - package-dist

    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up dist directory
        run: |
          mkdir dist

      - name: Retrieve (all!) build artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Attach release assets
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload ${{ github.ref_name }} ./dist/*-dist-*/*
